0001 0000          ; > TurboHdr
0002 0000          
0003 0000                   GBLL   $master 
0004 0000          $master  SETL   1 = 0   
0005 0000          
0006 0000                   GBLL   $Turbo  
0007 0000          $Turbo   SETL   1 = 1   
0008 0000          
0009 0000                   LNK    TOS01   
0001 0000                   TTL    > Tos01 
0002 0000          
0003 0000          ; First version for MNG 24/10/85 (1.10)
0004 0000          
0005 0000          
0006 0000                   GBLL   $rel2   
0007 0000          $rel2    SETL   1 = 1   
0008 0000          
0009 0000          ; Second release 65C102 Boot ROM    SKS 16/01/87 (1.20)
0010 0000          ; Also second release 6502 Boot ROM SKS 16/01/87 (1.20)
0011 0000          ; ECR supplied by DBell 12-Jan-87
0012 0000          
0013 0000          ; Differences from first release :
0014 0000          
0015 0000          ;       Converted from UADE format to MASM format
0016 0000          ;       Fixed bug in *GO   : *GO char in range &3A-&3F was le
0017 0000          ;       Fixed bug in *HELP : *HELP subject now keeps quiet (u
0018 0000          ;       OSWORD &0E number of parameter bytes bugs fixed (eg. 
0019 0000          ;       OSWORD &14 number of parameter bytes bugs fixed (ref.
0020 0000          ;       *HELP code shortened by common abbreviation checking
0021 0000          ;       Easy to change version numbers - only change at start
0022 0000          ;       Lots of MACROs added to clarify code
0023 0000          ;       Labels changed to local labels where applicable
0024 0000          ;       Turbo (extended 2nd Proc) versions can be conditional
0025 0000          
0026 0000          
0027 0000                   GBLL   $testing ; Allows us to load it into a runnin
0028 0000          $testing SETL   1 = 0   ; Always set to FALSE for release ver
0029 0000          
0030 0000          
0031 0000 0031     VERHI    *      "1"     
0032 0000 0032     VERMID   *      "2"     
0033 0000 0030     VERLO    *      "0"     
0034 0000          
0035 0000                   MACRO          
0036 0000          $label   GENAD  $const  
0037 0000          $label   LDXIM  :LSB: $const 
0038 0000                   LDYIM  :MSB: $const 
0039 0000                   MEND           
0040 0000          
0041 0000                   MACRO          
0042 0000          $l       R2BYTE $a      
0043 0000          $l       BIT    R2STAT  
0044 0000                   BPL    .-3     
0045 0000                   LD$a   R2DATA  
0046 0000                   MEND           
0047 0000          
0048 0000                   MACRO          
0049 0000          $l       W2BYTE $a      
0050 0000          $l       BIT    R2STAT  
0051 0000                   BVC    .-3     
0052 0000                   ST$a   R2DATA  
0053 0000                   MEND           
0054 0000          
0055 0000                   MACRO          
0056 0000          $l       R4BYTE         
0057 0000          $l       BIT    R4STAT  
0058 0000                   BPL    .-3     
0059 0000                   LDA    R4DATA  
0060 0000                   MEND           
0061 0000          
0062 0000          
0063 0000 00EE     execptr  *      &EE     ; Zero page TOS allocation
0064 0000 00F0     hxnumb   *      &F0     
0065 0000 00F2     goaddr   *      &F2     
0066 0000 00F4     IRQptr   *      &F4     
0067 0000 00F6     dataptr  *      &F6     
0068 0000 00F8     cliptr   *      &F8     
0069 0000 00F8     wrdptr   *      cliptr  
0070 0000 00FA     cbptr    *      &FA     
0071 0000 00FA     vstrptr  *      cbptr   
0072 0000 00FC     IRQatmp  *      &FC     
0073 0000 00FD     brkptr   *      &FD     
0074 0000 00FF     escflag  *      &FF     
0075 0000          
0076 0000          
0077 0000 0100     MRAM     *      &0100   ; Some code is copied here on initial
0078 0000          
0079 0000          
0080 0000                   ^      &0200   ; Vectors in page 2
0081 0000 0200     USRVEC   #      2       
0082 0000 0202     BRKVEC   #      2       
0083 0000 0204     ALLIRQ   #      2       
0084 0000 0206     IRQVEC   #      2       
0085 0000 0208     COMVEC   #      2       
0086 0000 020A     BYTVEC   #      2       
0087 0000 020C     WORVEC   #      2       
0088 0000 020E     WRCVEC   #      2       
0089 0000 0210     RDCVEC   #      2       
0090 0000 0212     FILVEC   #      2       
0091 0000 0214     ARGVEC   #      2       
0092 0000 0216     BGTVEC   #      2       
0093 0000 0218     BPTVEC   #      2       
0094 0000 021A     GPBVEC   #      2       
0095 0000 021C     FNDVEC   #      2       
0096 0000 021E     FSCVEC   #      2       
0097 0000 0220     EVTVEC   #      2       
0098 0000 0222     UPTVEC   #      2       
0099 0000 0224     NETVEC   #      2       
0100 0000 0226     VDUVEC   #      2       
0101 0000 0228     KEYVEC   #      2       
0102 0000 022A     INSVEC   #      2       
0103 0000 022C     REMVEC   #      2       
0104 0000 022E     CNPVEC   #      2       
0105 0000 0230     IND1VEC  #      2       
0106 0000 0232     IND2VEC  #      2       
0107 0000 0234     IND3VEC  #      2       
0108 0000          
0109 0000 0036     VecLengt *      @-&0200 ; Check consistency in rest of TOS
0110 0000          
0111 0000 0236     StarBuff #      &0300-@ ; Star command buffer/Host BRK buffer
0112 0000          
0113 0000 0236     BRKBuffe *      StarBuffer 
0114 0000          
0115 0000          
0116 0000 0301     Turbo    *      &0301   ; Page 3 is reserved for Turbo addres
0117 0000          
0118 0000          
0119 0000 FEF0     REG0     *      &FEF0   ; Address of the Turbo paging registe
0120 0000          
0121 0000 FEF8     TUBEB    *      &FEF8   ; Base of the TUBE (R) in the parasit
0122 0000          
0123 0000                   ^      TUBEB   
0124 0000 FEF8     R1STAT   #      1       
0125 0000 FEF9     R1DATA   #      1       
0126 0000 FEFA     R2STAT   #      1       
0127 0000 FEFB     R2DATA   #      1       
0128 0000 FEFC     R3STAT   #      1       
0129 0000 FEFD     R3DATA   #      1       
0130 0000 FEFE     R4STAT   #      1       
0131 0000 FEFF     R4DATA   #      1       
0132 0000          
0133 0000          
0134 0000                   ^      0       ; Reason codes to pass to Host in R2
0135 0000 0000     RDCHNO   #      2       
0136 0000 0002     CLINO    #      2       
0137 0000 0004     SBYTNO   #      2       
0138 0000 0006     BYTENO   #      2       
0139 0000 0008     WORDNO   #      2       
0140 0000 000A     RDLNNO   #      2       
0141 0000 000C     ARGSNO   #      2       
0142 0000 000E     BGETNO   #      2       
0143 0000 0010     BPUTNO   #      2       
0144 0000 0012     FINDNO   #      2       
0145 0000 0014     FILENO   #      2       
0146 0000 0016     GBPBNO   #      2       
0147 0000          
0148 0000 000D     CR       *      13      
0149 0000 000A     LF       *      10      
0150 0000          
0151 0000 0020     LCASE    *      &20     ; Characters ORed with this are lower
0152 0000 00DF     UCASE    *      &DF     ; Characters ANDed with this are uppe
0153 0000          
0154 0000          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0155 0000          
0156 0000                   ORG    &F800   
0157 F800          
0158 F800          RESET    ROUT           
0159 F800          
0160 F800          ; Copy the ROM into RAM - First copy the bit above the TUBE (
0161 F800          
0162 F800 A2 00             LDXIM  0       
0163 F802 BD 00 FF 10       LDAAX  &FF00   
0164 F805 9D 00 FF          STAAX  &FF00   
0165 F808 CA                DEX            
0166 F809 D0 F7             BNE    #BT10   
0167 F80B          
0168 F80B          ; Initialise the vectors and copy bit below the TUBE (FE00 to
0169 F80B          
0170 F80B A2 36             LDXIM  VecLength 
0171 F80D BD 80 FF 20       LDAAX  VECTAB  
0172 F810 9D 00 02          STAAX  USRVEC  
0173 F813 CA                DEX            
0174 F814 10 F7             BPL    #BT20   
0175 F816          
0176 F816 9A                TXS            ; Initialise the stack (&FF)
0177 F817          
0178 F817 A2 F0             LDXIM  REG0-&FE00 
0179 F819 BD FF FD 30       LDAAX  &FE00-1 
0180 F81C 9D FF FD          STAAX  &FE00-1 
0181 F81F CA                DEX            
0182 F820 D0 F7             BNE    #BT30   
0183 F822          
0184 F822          ; Now copy the rest of the ROM (F800 to FDFF)
0185 F822          
0186 F822 A0 00             LDYIM  :LSB: RESET 
0187 F824 84 F8             STY    cliptr  
0188 F826                   [      $Turbo  
0189 F826 8C F9 03          STY    Turbo+cliptr 
0190 F829 8C F0 FE          STY    REG0    ; Turbo off initially
0191 F82C                   ]              
0192 F82C A9 F8             LDAIM  :MSB: RESET 
0193 F82E 85 F9             STA    cliptr+1 
0194 F830 B1 F8    40       LDAIY  cliptr  
0195 F832 91 F8             STAIY  cliptr  
0196 F834 C8                INY            
0197 F835 D0 F9             BNE    #BT40   
0198 F837 E6 F9             INC    cliptr+1 
0199 F839 A5 F9             LDA    cliptr+1 
0200 F83B C9 FE             CMPIM  &FE     
0201 F83D D0 F1             BNE    #BT40   
0202 F83F          
0203 F83F A2 10             LDXIM  &10     ; Copy the code that accesses the TUB
0204 F841 BD 5F F8 50       LDAAX  FASTER  ; and thus gets rid of the ROM
0205 F844 9D 00 01          STAAX  MRAM    
0206 F847 CA                DEX            
0207 F848 10 F7             BPL    #BT50   
0208 F84A          
0209 F84A A5 EE             LDA    execptr ; Assume will be rerunning old progra
0210 F84C 85 F6             STA    dataptr 
0211 F84E A5 EF             LDA    execptr+1 
0212 F850 85 F7             STA    dataptr+1 
0213 F852          
0214 F852 A9 00             LDAIM  0       ; Initialise ESCAPE status
0215 F854 85 FF             STA    escflag 
0216 F856          
0217 F856                   ASSERT (:LSB: RESET) = 0 
0218 F856 85 F2             STA    goaddr  ; Initialise the value of HIMEM
0219 F858 A9 F8             LDAIM  :MSB: RESET 
0220 F85A 85 F3             STA    goaddr+1 
0221 F85C          
0222 F85C 4C 00 01          JMP    MRAM    ; Enter the TUBE flip code
0223 F85F          
0224 F85F          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0225 F85F          ; The TUBE flip code (copied to MRAM) accesses the TUBE to re
0226 F85F          
0227 F85F AD F8 FE FASTER   LDA    TUBEB   
0228 F862 58                CLI            
0229 F863          
0230 F863 4C 66 F8 RUNNING  JMP    GOING   ; Address patched when TOS has starte
0231 F866          
0232 F866          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0233 F866          ; Output zero terminated startup message
0234 F866          
0235 F866 20 8D FE GOING    JSR    VSTRNG  
0236 F869 0A                =      LF      
0237 F86A                   [      $Master 
0239 F86A                   |              
0240 F86A                   [      $Turbo  
0241 F86A 41 63 6F          =      "Acorn Tube 6502 256K" 
0242 F87E                   |              
0244 F87E                   ]              
0245 F87E                   ]              
0246 F87E 0A 0A 0D          =      LF, LF, CR, 0 
0247 F882 EA                NOP            
0248 F883          
0249 F883          ; Now change the running jump so that reexecution goes to CLI
0250 F883          
0251 F883 A9 94             LDAIM  :LSB: CLILOP 
0252 F885 8D 64 F8          STA    RUNNING+1 
0253 F888 A9 F8             LDAIM  :MSB: CLILOP 
0254 F88A 8D 65 F8          STA    RUNNING+2 
0255 F88D          
0256 F88D                   [      $testing 
0259 F88D                   |              
0260 F88D 20 90 F9          JSR    RDCHW   ; Get startup instructions from the H
0261 F890                   ]              
0262 F890 C9 80             CMPIM  &80     ; If startup = &80 then run the softw
0263 F892 F0 28             BEQ    GOIT    ; dataptr (may be old or new code)
0264 F894          
0265 F894          ; ...........................................................
0266 F894          ; Get cli commands and process them
0267 F894          
0268 F894 A9 2A    CLILOP   LDAIM  "*"     
0269 F896 20 EE FF          JSR    OsWrch  
0270 F899                   GENAD  RDLNCB  
0003 F899 A2 78             LDXIM  :LSB: RDLNCB 
0004 F89B A0 F9             LDYIM  :MSB: RDLNCB 
0005 F89D                   MEND           
0271 F89D A9 00             LDAIM  0       
0272 F89F 20 F1 FF          JSR    OsWord  
0273 F8A2 B0 0A             BCS    AckEscape 
0274 F8A4                   GENAD  StarBuffer 
0003 F8A4 A2 36             LDXIM  :LSB: StarBuffer 
0004 F8A6 A0 02             LDYIM  :MSB: StarBuffer 
0005 F8A8                   MEND           
0275 F8A8 20 F7 FF          JSR    OsCli   
0276 F8AB 4C 94 F8          JMP    CLILOP  
0277 F8AE          
0278 F8AE          
0279 F8AE          AckEscap                
0280 F8AE A9 7E             LDAIM  &7E     
0281 F8B0 20 F4 FF          JSR    OsByte  
0282 F8B3          
0283 F8B3 00                BRK            
0284 F8B4 11 45 73          =      &11, "Escape", 0 
0285 F8BC          
0286 F8BC          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0287 F8BC          ; Execute a hunk of code. Save it's execution address and use
0288 F8BC          
0289 F8BC A5 F6    GOIT     LDA    dataptr 
0290 F8BE 85 EE             STA    execptr 
0291 F8C0 85 F2             STA    goaddr  
0292 F8C2 A5 F7             LDA    dataptr+1 
0293 F8C4 85 EF             STA    execptr+1 
0294 F8C6 85 F3             STA    goaddr+1 
0295 F8C8                   [      $Turbo  
0296 F8C8 A9 00             LDAIM  0       
0297 F8CA 8D EF 03          STA    Turbo+execptr 
0298 F8CD                   ]              
0299 F8CD          
0300 F8CD          ; Find out if it is a language ROM (if it isn't execute it an
0301 F8CD          
0302 F8CD A0 07             LDYIM  7       
0303 F8CF B1 EE             LDAIY  execptr 
0304 F8D1 D8                CLD            
0305 F8D2 18                CLC            
0306 F8D3 65 EE             ADC    execptr 
0307 F8D5 85 FD             STA    brkptr  ; If it is set brkptr to its copyrigh
0308 F8D7 A9 00             LDAIM  0       
0309 F8D9 65 EF             ADC    execptr+1 
0310 F8DB 85 FE             STA    brkptr+1 
0311 F8DD A0 00             LDYIM  0       
0312 F8DF                   [      $Turbo  
0313 F8DF 8C FE 03          STY    Turbo+brkptr 
0314 F8E2                   ]              
0315 F8E2 B1 FD             LDAIY  brkptr  
0316 F8E4 D0 2A             BNE    NotRom  
0317 F8E6 C8                INY            
0318 F8E7 B1 FD             LDAIY  brkptr  
0319 F8E9 C9 28             CMPIM  "("     
0320 F8EB D0 23             BNE    NotRom  
0321 F8ED C8                INY            
0322 F8EE B1 FD             LDAIY  brkptr  
0323 F8F0 C9 43             CMPIM  "C"     
0324 F8F2 D0 1C             BNE    NotRom  
0325 F8F4 C8                INY            
0326 F8F5 B1 FD             LDAIY  brkptr  
0327 F8F7 C9 29             CMPIM  ")"     
0328 F8F9 D0 15             BNE    NotRom  
0329 F8FB          
0330 F8FB          ; It is a language ROM. See if we are allowed to execute it
0331 F8FB          
0332 F8FB A0 06             LDYIM  6       
0333 F8FD B1 EE             LDAIY  execptr 
0334 F8FF 29 4F             ANDIM  &4F     
0335 F901 C9 40             CMPIM  &40     ; Language bit set ?
0336 F903 90 15             BCC    NotLang 
0337 F905          
0338 F905          ; Code definition field correct for running on 6502 (=0) ?
0339 F905          
0340 F905 29 0D             ANDIM  CR      
0341 F907          
0342 F907                   [      $Turbo  
0343 F907 F0 07             BEQ    NotRom  ; 6502 ?
0344 F909 C9 01             CMPIM  1       ; Turbo 6502 ?
0345 F90B D0 30             BNE    BadType 
0346 F90D 6A                RORA           ; A := &80
0347 F90E 30 02             BMI    NOTRM2  ; Forced
0348 F910          
0349 F910 A9 00    NotRom   LDAIM  0       ; Turbo off
0350 F912          
0351 F912 8D F0 FE NOTRM2   STA    REG0    ; Only get Turbo if 0,(C) and Turbo b
0352 F915          
0353 F915 A9 01             LDAIM  1       
0354 F917 6C F2 00          JMI    goaddr  
0355 F91A                   |              
0360 F91A                   ]              
0361 F91A          
0362 F91A          
0363 F91A A9 60    NotLang  LDAIM  :LSB: DEFBRK 
0364 F91C 8D 02 02          STA    BRKVEC  
0365 F91F A9 F9             LDAIM  :MSB: DEFBRK ; default errors
0366 F921 8D 03 02          STA    BRKVEC+1 
0367 F924 00                BRK            
0368 F925 00 54 68          =      0, "This is not a language", 0 
0369 F93D          
0370 F93D          
0371 F93D A9 60    BadType  LDAIM  :LSB: DEFBRK 
0372 F93F 8D 02 02          STA    BRKVEC  
0373 F942 A9 F9             LDAIM  :MSB: DEFBRK ; default errors
0374 F944 8D 03 02          STA    BRKVEC+1 
0375 F947 00                BRK            
0376 F948 00 49 20          =      0, "I cannot run this code", 0 
0377 F960          
0378 F960          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0379 F960          ; TOS CLILOP error handling routine
0380 F960          
0381 F960          DEFBRK   ROUT           
0382 F960          
0383 F960 A2 FF             LDXIM  &FF     
0384 F962 9A                TXS            
0385 F963 20 E7 FF          JSR    OsNewl  
0386 F966          
0387 F966 A0 01             LDYIM  1       
0388 F968 B1 FD    10       LDAIY  brkptr  
0389 F96A F0 06             BEQ    #FT90   
0390 F96C 20 EE FF          JSR    OsWrch  
0391 F96F C8                INY            
0392 F970 D0 F6             BNE    #BT10   
0393 F972          
0394 F972 20 E7 FF 90       JSR    OsNewl  
0395 F975 4C 94 F8          JMP    CLILOP  
0396 F978          
0397 F978          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0398 F978          ; OsWord 0 control block
0399 F978          
0400 F978 36 02    RDLNCB   &      StarBuffer 
0401 F97A CA                =      &300-StarBuffer 
0402 F97B 20                =      " "     
0403 F97C FF                =      &FF     
0404 F97D          
0405 F97D          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0406 F97D          ; OsWrch
0407 F97D          ; ======
0408 F97D          
0409 F97D          ; A->R1
0410 F97D          
0411 F97D 2C F8 FE WRCH     BIT    R1STAT  
0412 F980 EA                NOP            
0413 F981 50 FA             BVC    WRCH    
0414 F983 8D F9 FE          STA    R1DATA  
0415 F986 60                RTS            
0416 F987          
0417 F987          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0418 F987          ; OsRdch
0419 F987          ; ======
0420 F987          
0421 F987          ; RDCHNO->R2; R2bit7->C, R2->A
0422 F987          
0423 F987 A9 00    RDCH     LDAIM  RDCHNO  
0424 F989 20 8A FC          JSR    WRITOO  
0425 F98C          
0426 F98C 20 90 F9 RDCHA    JSR    RDCHW   
0427 F98F 0A                ASLA           
0428 F990          
0429 F990          RDCHW    R2BYTE A       
0003 F990 2C FA FE RDCHW    BIT    R2STAT  
0004 F993 10 FB             BPL    .-3     
0005 F995 AD FB FE          LDA    R2DATA  
0006 F998                   MEND           
0430 F998          
0431 F998 60       ANRTS    RTS            
0432 F999          
0433 F999          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0434 F999          ; Skip spaces subroutine for CLI handling
0435 F999          
0436 F999 C8       DEBLNL   INY            
0437 F99A B1 F8    DEBLNK   LDAIY  cliptr  
0438 F99C C9 20             CMPIM  " "     
0439 F99E F0 F9             BEQ    DEBLNL  
0440 F9A0 60                RTS            
0441 F9A1          
0442 F9A1                   [      $rel2   
0443 F9A1          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0444 F9A1          ; Test abbreviation routine for '*HELP'
0445 F9A1          
0446 F9A1          TestAbbr ROUT           
0447 F9A1          
0448 F9A1 B1 F8             LDAIY  cliptr  ; Get char
0449 F9A3 C8                INY            
0450 F9A4 C9 2E             CMPIM  "."     
0451 F9A6 F0 03             BEQ    #FT99   ; CSet -> '.' found
0452 F9A8 09 20             ORAIM  LCASE   
0453 F9AA 18                CLC            ; CClear -> Lowercase char returned
0454 F9AB 60       99       RTS            
0455 F9AC          
0456 F9AC          
0457 F9AC 70 6C 65 ELPstr   =      "pleh"  
0458 F9B0          
0459 F9B0                   ]              
0460 F9B0          
0461 F9B0          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0462 F9B0          ; Read hex number routine
0463 F9B0          
0464 F9B0          ReadNumb ROUT           
0465 F9B0          
0466 F9B0 A2 00             LDXIM  0       
0467 F9B2 86 F0             STX    hxnumb  
0468 F9B4 86 F1             STX    hxnumb+1 
0469 F9B6          
0470 F9B6 B1 F8    10       LDAIY  cliptr  
0471 F9B8 C9 30             CMPIM  "0"     
0472 F9BA 90 21             BCC    #FT99   
0473 F9BC C9 3A             CMPIM  "9"+1   
0474 F9BE 90 0C             BCC    #FT20   
0475 F9C0 29 DF             ANDIM  UCASE   
0476 F9C2 E9 07             SBCIM  7       ; "A" -> "0"+10 etc.
0477 F9C4 90 17             BCC    #FT99   
0478 F9C6                   [      $rel2   
0479 F9C6 E9 30             SBCIM  "0"     ; Catch the range &3A-&3F as invalid
0480 F9C8 C9 10             CMPIM  16      
0481 F9CA                   |              
0483 F9CA                   ]              
0484 F9CA B0 11             BCS    #FT99   
0485 F9CC          
0486 F9CC 0A       20       ASLA           
0487 F9CD 0A                ASLA           
0488 F9CE 0A                ASLA           
0489 F9CF 0A                ASLA           
0490 F9D0 A2 03             LDXIM  3       
0491 F9D2 0A       30       ASLA           
0492 F9D3 26 F0             ROL    hxnumb  
0493 F9D5 26 F1             ROL    hxnumb+1 
0494 F9D7 CA                DEX            
0495 F9D8 10 F8             BPL    #BT30   
0496 F9DA C8                INY            
0497 F9DB D0 D9             BNE    #BT10   
0498 F9DD          
0499 F9DD 60       99       RTS            
0500 F9DE          
0501 F9DE          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0502 F9DE          ; string,cr->R2
0503 F9DE          
0504 F9DE          STRING   ROUT           
0505 F9DE          
0506 F9DE 86 F8             STX    cliptr  
0507 F9E0 84 F9             STY    cliptr+1 
0508 F9E2          
0509 F9E2 A0 00    STRINF   LDYIM  0       
0510 F9E4                   [      $Turbo  
0511 F9E4 8C F9 03          STY    Turbo+cliptr 
0512 F9E7                   ]              
0513 F9E7 2C FA FE 10       BIT    R2STAT  
0514 F9EA 50 FB             BVC    #BT10   
0515 F9EC B1 F8             LDAIY  cliptr  
0516 F9EE 8D FB FE          STA    R2DATA  
0517 F9F1 C8                INY            
0518 F9F2 C9 0D             CMPIM  CR      
0519 F9F4 D0 F1             BNE    #BT10   
0520 F9F6          
0521 F9F6 A4 F9             LDY    cliptr+1 
0522 F9F8 60                RTS            
0523 F9F9          
0524 F9F9          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0525 F9F9          ; OsCli
0526 F9F9          ; =====
0527 F9F9          
0528 F9F9          ; Check for TOS commands of GO and HELP
0529 F9F9          ; Respond to HELP and pass on. Execute GO but do not pass on
0530 F9F9          
0531 F9F9          ; CLINO->R2, String+CR->R2; R2->answer
0532 F9F9          ; If answer = &80 then execute the binary which was sent
0533 F9F9          
0534 F9F9          CLI      ROUT           
0535 F9F9          
0536 F9F9 48                PHA            
0537 F9FA 86 F8             STX    cliptr  
0538 F9FC 84 F9             STY    cliptr+1 
0539 F9FE A0 00             LDYIM  0       
0540 FA00                   [      $Turbo  
0541 FA00 8C F9 03          STY    Turbo+cliptr 
0542 FA03                   ]              
0543 FA03          
0544 FA03          ; Skip spaces and stars at the beginning of the line
0545 FA03          
0546 FA03 20 9A F9 10       JSR    DEBLNK  
0547 FA06 C8                INY            
0548 FA07 C9 2A             CMPIM  "*"     
0549 FA09 F0 F8             BEQ    #BT10   
0550 FA0B          
0551 FA0B                   [      $rel2   
0552 FA0B          ; Release 2 is rather different here
0553 FA0B          
0554 FA0B 09 20             ORAIM  LCASE   ; Lowercase first char
0555 FA0D          
0556 FA0D C9 67             CMPIM  "g"     ; Maybe '*GO'
0557 FA0F F0 47             BEQ    MaybeGo 
0558 FA11          
0559 FA11 A2 03             LDXIM  4-1     ; Try '*HELP'
0560 FA13 DD AC F9 20       CMPAX  ELPstr  
0561 FA16 D0 2F             BNE    PassCli 
0562 FA18 CA                DEX            ; If we've matched it all, don't test
0563 FA19 30 05             BMI    MaybeHelp 
0564 FA1B 20 A1 F9          JSR    TestAbbrev 
0565 FA1E 90 F3             BCC    #BT20   ; Not abbreviation, so loop
0566 FA20          
0567 FA20          MaybeHel                
0568 FA20 20 9A F9          JSR    DEBLNK  ; Skip spaces following '*HELP'
0569 FA23 C9 2E             CMPIM  "."     
0570 FA25 F0 04             BEQ    DoHelp  
0571 FA27 C9 0D             CMPIM  CR      
0572 FA29 D0 1C             BNE    PassCli 
0573 FA2B                   |              
0610 FA2B                   ]              
0611 FA2B          
0612 FA2B          
0613 FA2B 20 8D FE DoHelp   JSR    VSTRNG  ; It's '*HELP' so give message
0614 FA2E 0A 0D             =      LF, CR  
0615 FA30                   [      $Master 
0617 FA30                   |              
0618 FA30                   [      $Turbo  
0619 FA30 54 75 72          =      "Turbo 6502 Tube" 
0620 FA3F                   |              
0622 FA3F                   ]              
0623 FA3F                   ]              
0624 FA3F 20 31 2E          =      " ", VERHI, ".", VERMID, VERLO 
0625 FA44 0A 0D             =      LF, CR  
0626 FA46 EA                NOP            
0627 FA47          
0628 FA47          
0629 FA47          ; Send the CLI line across to the Host
0630 FA47          
0631 FA47 A9 02    PassCli  LDAIM  CLINO   
0632 FA49 20 8A FC          JSR    WRITOO  
0633 FA4C          
0634 FA4C 20 E2 F9          JSR    STRINF  
0635 FA4F          
0636 FA4F          
0637 FA4F 20 90 F9 CLIRUJ   JSR    RDCHW   ; Get back the answer and execute cod
0638 FA52 C9 80             CMPIM  &80     
0639 FA54 F0 21             BEQ    CLIRUN  
0640 FA56 68                PLA            
0641 FA57 60                RTS            
0642 FA58          
0643 FA58          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0644 FA58          ; Test for '*GO' [<addr>], CR
0645 FA58          
0646 FA58          MaybeGo  ROUT           
0647 FA58          
0648 FA58                   [      $rel2   
0649 FA58 20 A1 F9          JSR    TestAbbrev 
0650 FA5B C9 6F             CMPIM  "o"     
0651 FA5D D0 E8             BNE    PassCli 
0652 FA5F          
0653 FA5F 20 9A F9          JSR    DEBLNK  
0654 FA62                   |              
0660 FA62                   ]              
0661 FA62          
0662 FA62          ; Think we've found the GO command, but might not have if no 
0663 FA62          
0664 FA62 20 B0 F9          JSR    ReadNumber 
0665 FA65          
0666 FA65 20 9A F9          JSR    DEBLNK  
0667 FA68 C9 0D             CMPIM  CR      
0668 FA6A D0 DB             BNE    PassCli 
0669 FA6C          
0670 FA6C          ; If GO cr then use old address and GO again
0671 FA6C          
0672 FA6C 8A                TXA            
0673 FA6D F0 08             BEQ    CLIRUN  
0674 FA6F          
0675 FA6F A5 F0             LDA    hxnumb  ; Setup new address to start at
0676 FA71 85 F6             STA    dataptr 
0677 FA73 A5 F1             LDA    hxnumb+1 
0678 FA75 85 F7             STA    dataptr+1 
0679 FA77          
0680 FA77          ; ...........................................................
0681 FA77          ; When executing from CLI save old code's entry point/HIMEM
0682 FA77          
0683 FA77 A5 EF    CLIRUN   LDA    execptr+1 
0684 FA79 48                PHA            
0685 FA7A A5 EE             LDA    execptr 
0686 FA7C 48                PHA            
0687 FA7D                   [      $Turbo  
0688 FA7D AD F0 FE          LDA    REG0    
0689 FA80 48                PHA            
0690 FA81                   ]              
0691 FA81          
0692 FA81 20 BC F8          JSR    GOIT    
0693 FA84          
0694 FA84                   [      $Turbo  
0695 FA84 68                PLA            
0696 FA85 8D F0 FE          STA    REG0    
0697 FA88                   ]              
0698 FA88 68                PLA            
0699 FA89 85 EE             STA    execptr 
0700 FA8B 85 F2             STA    goaddr  
0701 FA8D 68                PLA            
0702 FA8E 85 EF             STA    execptr+1 
0703 FA90 85 F3             STA    goaddr+1 
0704 FA92 68                PLA            
0705 FA93 60                RTS            
0706 FA94          
0707 FA94          
0708 FA94 F0 B9    CLIRUM   BEQ    CLIRUJ  
0709 FA96          
0710 FA96                   LNK    TOS02   
0001 FA96                   TTL    > Tos02 
0002 FA96          
0003 FA96          ; OsByte
0004 FA96          ; ======
0005 FA96          
0006 FA96          ; If A < 128 then SBYTNO->R2, X->R2, A->R2; R2->X
0007 FA96          
0008 FA96 C9 80    BYTE     CMPIM  &80     
0009 FA98 B0 25             BCS    SBYTE   
0010 FA9A          
0011 FA9A 48                PHA            
0012 FA9B A9 04             LDAIM  SBYTNO  
0013 FA9D                   W2BYTE A       
0003 FA9D 2C FA FE          BIT    R2STAT  
0004 FAA0 50 FB             BVC    .-3     
0005 FAA2 8D FB FE          STA    R2DATA  
0006 FAA5                   MEND           
0014 FAA5                   W2BYTE X       
0003 FAA5 2C FA FE          BIT    R2STAT  
0004 FAA8 50 FB             BVC    .-3     
0005 FAAA 8E FB FE          STX    R2DATA  
0006 FAAD                   MEND           
0015 FAAD 68                PLA            
0016 FAAE                   W2BYTE A       
0003 FAAE 2C FA FE          BIT    R2STAT  
0004 FAB1 50 FB             BVC    .-3     
0005 FAB3 8D FB FE          STA    R2DATA  
0006 FAB6                   MEND           
0017 FAB6          
0018 FAB6                   R2BYTE X       
0003 FAB6 2C FA FE          BIT    R2STAT  
0004 FAB9 10 FB             BPL    .-3     
0005 FABB AE FB FE          LDX    R2DATA  
0006 FABE                   MEND           
0019 FABE 60                RTS            
0020 FABF          
0021 FABF          
0022 FABF          ; If A >= 128 check for TOS OsByte calls else go into normal 
0023 FABF          
0024 FABF C9 82    SBYTE    CMPIM  &82     
0025 FAC1 F0 72             BEQ    MACADD  
0026 FAC3 C9 83             CMPIM  &83     
0027 FAC5 F0 5D             BEQ    LOMEM   
0028 FAC7 C9 84             CMPIM  &84     
0029 FAC9 F0 48             BEQ    HIMEM   
0030 FACB          
0031 FACB          ; BYTENO->R2, X->R2, Y->R2, A->R2
0032 FACB          
0033 FACB 48                PHA            
0034 FACC A9 06             LDAIM  BYTENO  
0035 FACE                   W2BYTE A       
0003 FACE 2C FA FE          BIT    R2STAT  
0004 FAD1 50 FB             BVC    .-3     
0005 FAD3 8D FB FE          STA    R2DATA  
0006 FAD6                   MEND           
0036 FAD6                   W2BYTE X       
0003 FAD6 2C FA FE          BIT    R2STAT  
0004 FAD9 50 FB             BVC    .-3     
0005 FADB 8E FB FE          STX    R2DATA  
0006 FADE                   MEND           
0037 FADE                   W2BYTE Y       
0003 FADE 2C FA FE          BIT    R2STAT  
0004 FAE1 50 FB             BVC    .-3     
0005 FAE3 8C FB FE          STY    R2DATA  
0006 FAE6                   MEND           
0038 FAE6 68                PLA            
0039 FAE7                   W2BYTE A       
0003 FAE7 2C FA FE          BIT    R2STAT  
0004 FAEA 50 FB             BVC    .-3     
0005 FAEC 8D FB FE          STA    R2DATA  
0006 FAEF                   MEND           
0040 FAEF          
0041 FAEF          ; if A=&9D exit now
0042 FAEF          ; if A=&8E then it's run a rom
0043 FAEF          ; R2bit7->C, R2->Y, R2->X
0044 FAEF          
0045 FAEF C9 8E             CMPIM  &8E     
0046 FAF1 F0 A1             BEQ    CLIRUM  
0047 FAF3 C9 9D             CMPIM  &9D     
0048 FAF5 F0 1B             BEQ    BYTEX   
0049 FAF7          
0050 FAF7 48                PHA            
0051 FAF8                   R2BYTE A       
0003 FAF8 2C FA FE          BIT    R2STAT  
0004 FAFB 10 FB             BPL    .-3     
0005 FAFD AD FB FE          LDA    R2DATA  
0006 FB00                   MEND           
0052 FB00 0A                ASLA           
0053 FB01 68                PLA            
0054 FB02                   R2BYTE Y       
0003 FB02 2C FA FE          BIT    R2STAT  
0004 FB05 10 FB             BPL    .-3     
0005 FB07 AC FB FE          LDY    R2DATA  
0006 FB0A                   MEND           
0055 FB0A                   R2BYTE X       
0003 FB0A 2C FA FE          BIT    R2STAT  
0004 FB0D 10 FB             BPL    .-3     
0005 FB0F AE FB FE          LDX    R2DATA  
0006 FB12                   MEND           
0056 FB12          
0057 FB12 60       BYTEX    RTS            
0058 FB13          
0059 FB13          
0060 FB13          HIMEM                   
0061 FB13                   [      $Turbo  
0062 FB13 2C F0 FE          BIT    REG0    
0063 FB16 10 07             BPL    ORD84   
0064 FB18 A9 04             LDAIM  &04     ; Volume 4
0065 FB1A A2 00             LDXIM  &00     
0066 FB1C A0 00             LDYIM  &00     
0067 FB1E 60                RTS            
0068 FB1F          ORD84                   
0069 FB1F                   ]              
0070 FB1F A6 F2             LDX    goaddr  
0071 FB21 A4 F3             LDY    goaddr+1 
0072 FB23 60                RTS            
0073 FB24          
0074 FB24          
0075 FB24          LOMEM                   
0076 FB24                   [      $Turbo  
0077 FB24 2C F0 FE          BIT    REG0    
0078 FB27 10 07             BPL    ORD83   
0079 FB29 A9 01             LDAIM  &01     ; Volume 1
0080 FB2B A2 00             LDXIM  &00     
0081 FB2D A0 00             LDYIM  &00     
0082 FB2F 60                RTS            
0083 FB30          ORD83                   
0084 FB30                   ]              
0085 FB30                   GENAD  &0800   
0003 FB30 A2 00             LDXIM  :LSB: &0800 
0004 FB32 A0 08             LDYIM  :MSB: &0800 
0005 FB34                   MEND           
0086 FB34 60                RTS            
0087 FB35          
0088 FB35          
0089 FB35          MACADD   GENAD  0       
0003 FB35 A2 00    MACADD   LDXIM  :LSB: 0 
0004 FB37 A0 00             LDYIM  :MSB: 0 
0005 FB39                   MEND           
0090 FB39 60                RTS            
0091 FB3A          
0092 FB3A          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0093 FB3A          ; OsWord
0094 FB3A          ; ======
0095 FB3A          
0096 FB3A          ; If A=0 then use READLN
0097 FB3A          
0098 FB3A          WORD     ROUT           
0099 FB3A          
0100 FB3A 86 F8             STX    wrdptr  
0101 FB3C 84 F9             STY    wrdptr+1 
0102 FB3E                   [      $Turbo  
0103 FB3E A0 00             LDYIM  0       
0104 FB40 8C F9 03          STY    Turbo+wrdptr 
0105 FB43                   ]              
0106 FB43 A8                TAY            
0107 FB44 F0 71             BEQ    READLN  
0108 FB46 48                PHA            
0109 FB47          
0110 FB47          ; WORDNO->R2, A->R2
0111 FB47          
0112 FB47 A0 08             LDYIM  WORDNO  
0113 FB49                   W2BYTE Y       
0003 FB49 2C FA FE          BIT    R2STAT  
0004 FB4C 50 FB             BVC    .-3     
0005 FB4E 8C FB FE          STY    R2DATA  
0006 FB51                   MEND           
0114 FB51                   W2BYTE A       
0003 FB51 2C FA FE          BIT    R2STAT  
0004 FB54 50 FB             BVC    .-3     
0005 FB56 8D FB FE          STA    R2DATA  
0006 FB59                   MEND           
0115 FB59          
0116 FB59          ; A >= 128                size := (CB),0
0117 FB59          ; (A < 128) AND (A > &14) size := 16
0118 FB59          ; A <= &14                size := table%(A-1)
0119 FB59          
0120 FB59 AA                TAX            
0121 FB5A 10 08             BPL    #FA20   
0122 FB5C          
0123 FB5C A0 00             LDYIM  0       
0124 FB5E B1 F8             LDAIY  wrdptr  
0125 FB60 A8                TAY            
0126 FB61 4C 6D FB          JMP    #FA30   
0127 FB64          
0128 FB64 BC 06 FD 20       LDYAX  WORSEN -01 
0129 FB67 E0 15             CPXIM  &15     
0130 FB69 90 02             BCC    #FA30   
0131 FB6B A0 10             LDYIM  &10     
0132 FB6D          
0133 FB6D          ; size->R2
0134 FB6D          
0135 FB6D          30       W2BYTE Y       
0003 FB6D 2C FA FE 30       BIT    R2STAT  
0004 FB70 50 FB             BVC    .-3     
0005 FB72 8C FB FE          STY    R2DATA  
0006 FB75                   MEND           
0136 FB75          
0137 FB75          ; size [ bytes from control block ->R2 ]
0138 FB75          
0139 FB75 88                DEY            
0140 FB76 30 0D             BMI    #FT50   
0141 FB78          
0142 FB78 2C FA FE 40       BIT    R2STAT  
0143 FB7B 50 FB             BVC    #BT40   
0144 FB7D B1 F8             LDAIY  wrdptr  
0145 FB7F 8D FB FE          STA    R2DATA  
0146 FB82 88                DEY            
0147 FB83 10 F3             BPL    #BT40   
0148 FB85          
0149 FB85          ; A >= 128                size := (CB),1
0150 FB85          ; (A < 128) AND (A > &14) size := 16
0151 FB85          ; A <= &14                size := table%(A-1)
0152 FB85          
0153 FB85 8A       50       TXA            
0154 FB86 10 08             BPL    #FT60   
0155 FB88 A0 01             LDYIM  1       
0156 FB8A B1 F8             LDAIY  wrdptr  
0157 FB8C A8                TAY            
0158 FB8D 4C 99 FB          JMP    #FA70   
0159 FB90          
0160 FB90 BC 1A FD 60       LDYAX  WORRCV -01 
0161 FB93 E0 15             CPXIM  &15     
0162 FB95 90 02             BCC    #FA70   
0163 FB97 A0 10             LDYIM  &10     
0164 FB99          
0165 FB99          ; size->R2
0166 FB99          
0167 FB99          70       W2BYTE Y       
0003 FB99 2C FA FE 70       BIT    R2STAT  
0004 FB9C 50 FB             BVC    .-3     
0005 FB9E 8C FB FE          STY    R2DATA  
0006 FBA1                   MEND           
0168 FBA1          
0169 FBA1          ; size [ R2 -> bytes to control block ]
0170 FBA1          
0171 FBA1 88                DEY            
0172 FBA2 30 0D             BMI    #FT90   
0173 FBA4          
0174 FBA4 2C FA FE 80       BIT    R2STAT  
0175 FBA7 10 FB             BPL    #BT80   
0176 FBA9 AD FB FE          LDA    R2DATA  
0177 FBAC 91 F8             STAIY  wrdptr  
0178 FBAE 88                DEY            
0179 FBAF 10 F3             BPL    #BT80   
0180 FBB1          
0181 FBB1 A4 F9    90       LDY    wrdptr+1 
0182 FBB3 A6 F8             LDX    wrdptr  
0183 FBB5 68                PLA            
0184 FBB6 60                RTS            
0185 FBB7          
0186 FBB7          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0187 FBB7          ; OsWord 0
0188 FBB7          
0189 FBB7          ; RDLNNO->R2, (CB),4->R2, (CB),3->R2, (CB),2->R2, 7->R2, 0->R
0190 FBB7          
0191 FBB7          READLN   ROUT           
0192 FBB7          
0193 FBB7 A9 0A             LDAIM  RDLNNO  
0194 FBB9 20 8A FC          JSR    WRITOO  
0195 FBBC          
0196 FBBC A0 04             LDYIM  4       
0197 FBBE 2C FA FE 10       BIT    R2STAT  
0198 FBC1 50 FB             BVC    #BT10   
0199 FBC3 B1 F8             LDAIY  wrdptr  
0200 FBC5 8D FB FE          STA    R2DATA  
0201 FBC8 88                DEY            
0202 FBC9 C0 01             CPYIM  1       
0203 FBCB D0 F1             BNE    #BT10   
0204 FBCD          
0205 FBCD A9 07             LDAIM  7       
0206 FBCF 20 8A FC          JSR    WRITOO  
0207 FBD2 B1 F8             LDAIY  wrdptr  
0208 FBD4 48                PHA            
0209 FBD5 88                DEY            
0210 FBD6                   W2BYTE Y       
0003 FBD6 2C FA FE          BIT    R2STAT  
0004 FBD9 50 FB             BVC    .-3     
0005 FBDB 8C FB FE          STY    R2DATA  
0006 FBDE                   MEND           
0211 FBDE B1 F8             LDAIY  wrdptr  
0212 FBE0 48                PHA            
0213 FBE1 A2 FF             LDXIM  &FF     
0214 FBE3          
0215 FBE3          ; R2->answer. If answer >= &80 escape was pressed
0216 FBE3          
0217 FBE3 20 90 F9          JSR    RDCHW   
0218 FBE6 C9 80             CMPIM  &80     
0219 FBE8 B0 1D             BCS    #FT90   
0220 FBEA 68                PLA            
0221 FBEB 85 F8             STA    wrdptr  
0222 FBED 68                PLA            
0223 FBEE 85 F9             STA    wrdptr+1 
0224 FBF0          
0225 FBF0          ; R2->string cr
0226 FBF0          
0227 FBF0 A0 00             LDYIM  0       
0228 FBF2          20       R2BYTE A       
0003 FBF2 2C FA FE 20       BIT    R2STAT  
0004 FBF5 10 FB             BPL    .-3     
0005 FBF7 AD FB FE          LDA    R2DATA  
0006 FBFA                   MEND           
0229 FBFA 91 F8             STAIY  wrdptr  
0230 FBFC C8                INY            
0231 FBFD C9 0D             CMPIM  CR      
0232 FBFF D0 F1             BNE    #BA20   
0233 FC01          
0234 FC01 A9 00             LDAIM  0       
0235 FC03 88                DEY            
0236 FC04 18                CLC            
0237 FC05 E8                INX            
0238 FC06 60                RTS            
0239 FC07          
0240 FC07          
0241 FC07 68       90       PLA            
0242 FC08 68                PLA            
0243 FC09 A9 00             LDAIM  0       
0244 FC0B 60                RTS            
0245 FC0C          
0246 FC0C          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0247 FC0C          ; OsArgs
0248 FC0C          ; ======
0249 FC0C          
0250 FC0C          ; ARGSNO->R2, CB,3->R2, CB,2->R2, CB,1->R2, CB,0->R2, A->R2
0251 FC0C          
0252 FC0C 48       ARGS     PHA            
0253 FC0D A9 0C             LDAIM  ARGSNO  
0254 FC0F 20 8A FC          JSR    WRITOO  
0255 FC12          
0256 FC12                   W2BYTE Y       
0003 FC12 2C FA FE          BIT    R2STAT  
0004 FC15 50 FB             BVC    .-3     
0005 FC17 8C FB FE          STY    R2DATA  
0006 FC1A                   MEND           
0257 FC1A B5 03             LDAZX  3       
0258 FC1C 20 8A FC          JSR    WRITOO  
0259 FC1F B5 02             LDAZX  2       
0260 FC21 20 8A FC          JSR    WRITOO  
0261 FC24 B5 01             LDAZX  1       
0262 FC26 20 8A FC          JSR    WRITOO  
0263 FC29 B5 00             LDAZX  0       
0264 FC2B 20 8A FC          JSR    WRITOO  
0265 FC2E 68                PLA            
0266 FC2F 20 8A FC          JSR    WRITOO  
0267 FC32          
0268 FC32          ; R2->A, R2->CB,3, R2->CB,2, R2->CB,1, R2->CB,0
0269 FC32          
0270 FC32 20 90 F9          JSR    RDCHW   
0271 FC35 48                PHA            
0272 FC36 20 90 F9          JSR    RDCHW   
0273 FC39 95 03             STAZX  3       
0274 FC3B 20 90 F9          JSR    RDCHW   
0275 FC3E 95 02             STAZX  2       
0276 FC40 20 90 F9          JSR    RDCHW   
0277 FC43 95 01             STAZX  1       
0278 FC45 20 90 F9          JSR    RDCHW   
0279 FC48 95 00             STAZX  0       
0280 FC4A 68                PLA            
0281 FC4B 60                RTS            
0282 FC4C          
0283 FC4C          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0284 FC4C          ; OsFind
0285 FC4C          ; ======
0286 FC4C          
0287 FC4C          ; FINDNO->R2, A->R2
0288 FC4C          
0289 FC4C 48       FIND     PHA            
0290 FC4D A9 12             LDAIM  FINDNO  
0291 FC4F 20 8A FC          JSR    WRITOO  
0292 FC52 68                PLA            
0293 FC53 20 8A FC          JSR    WRITOO  
0294 FC56 C9 00             CMPIM  0       
0295 FC58 D0 0A             BNE    FINDLN  
0296 FC5A          
0297 FC5A          ; If A=0 Y->R2, R2->junk
0298 FC5A          
0299 FC5A 48                PHA            
0300 FC5B 98                TYA            
0301 FC5C 20 8A FC          JSR    WRITOO  
0302 FC5F 20 90 F9          JSR    RDCHW   
0303 FC62 68                PLA            
0304 FC63 60                RTS            
0305 FC64          
0306 FC64          ; If A <> 0 string cr->R2, R2->A
0307 FC64          
0308 FC64 20 DE F9 FINDLN   JSR    STRING  
0309 FC67 4C 90 F9          JMP    RDCHW   
0310 FC6A          
0311 FC6A          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0312 FC6A          ; OsBGet
0313 FC6A          ; ======
0314 FC6A          
0315 FC6A          ; BGETNO->R2, Y->R2; R2bit7->C, R2->A
0316 FC6A          
0317 FC6A A9 0E    BGET     LDAIM  BGETNO  
0318 FC6C 20 8A FC          JSR    WRITOO  
0319 FC6F 98                TYA            
0320 FC70 20 8A FC          JSR    WRITOO  
0321 FC73 4C 8C F9          JMP    RDCHA   
0322 FC76          
0323 FC76          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0324 FC76          ; OsBPut
0325 FC76          ; ======
0326 FC76          
0327 FC76          ; BPUTNO->R2, Y->R2, A->R2; R2->junk
0328 FC76          
0329 FC76 48       BPUT     PHA            
0330 FC77 A9 10             LDAIM  BPUTNO  
0331 FC79 20 8A FC          JSR    WRITOO  
0332 FC7C 98                TYA            
0333 FC7D 20 8A FC          JSR    WRITOO  
0334 FC80 68                PLA            
0335 FC81 20 8A FC          JSR    WRITOO  
0336 FC84 48                PHA            
0337 FC85 20 90 F9          JSR    RDCHW   
0338 FC88 68                PLA            
0339 FC89 60                RTS            
0340 FC8A          
0341 FC8A          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0342 FC8A          ; subroutine to write A to R2
0343 FC8A          
0344 FC8A 2C FA FE WRITOO   BIT    R2STAT  
0345 FC8D 50 FB             BVC    WRITOO  
0346 FC8F 8D FB FE          STA    R2DATA  
0347 FC92 60                RTS            
0348 FC93          
0349 FC93          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0350 FC93          ; OsFile
0351 FC93          ; ======
0352 FC93          
0353 FC93          ; FILENO->R2, (CB),17->R2...(CB),2->R2, string cr->R2, A->R2
0354 FC93          
0355 FC93          FILE     ROUT           
0356 FC93          
0357 FC93 84 FB             STY    cbptr+1 
0358 FC95 86 FA             STX    cbptr   
0359 FC97 48                PHA            
0360 FC98                   [      $Turbo  
0361 FC98 A9 00             LDAIM  0       
0362 FC9A 8D FB 03          STA    Turbo+cbptr 
0363 FC9D                   ]              
0364 FC9D          
0365 FC9D A9 14             LDAIM  FILENO  
0366 FC9F 20 8A FC          JSR    WRITOO  
0367 FCA2          
0368 FCA2 A0 11             LDYIM  17      
0369 FCA4 B1 FA    10       LDAIY  cbptr   
0370 FCA6 20 8A FC          JSR    WRITOO  
0371 FCA9 88                DEY            
0372 FCAA C0 01             CPYIM  1       
0373 FCAC D0 F6             BNE    #BT10   
0374 FCAE          
0375 FCAE 88                DEY            
0376 FCAF B1 FA             LDAIY  cbptr   
0377 FCB1 AA                TAX            
0378 FCB2 C8                INY            
0379 FCB3 B1 FA             LDAIY  cbptr   
0380 FCB5 A8                TAY            
0381 FCB6 20 DE F9          JSR    STRING  
0382 FCB9 68                PLA            
0383 FCBA 20 8A FC          JSR    WRITOO  
0384 FCBD          
0385 FCBD          ; R2->A, R2->(CB),17...R2->(CB),2
0386 FCBD          
0387 FCBD 20 90 F9          JSR    RDCHW   
0388 FCC0 48                PHA            
0389 FCC1          
0390 FCC1 A0 11             LDYIM  17      
0391 FCC3 20 90 F9 20       JSR    RDCHW   
0392 FCC6 91 FA             STAIY  cbptr   
0393 FCC8 88                DEY            
0394 FCC9 C0 01             CPYIM  1       
0395 FCCB D0 F6             BNE    #BT20   
0396 FCCD          
0397 FCCD A4 FB             LDY    cbptr+1 
0398 FCCF A6 FA             LDX    cbptr   
0399 FCD1 68                PLA            
0400 FCD2 60                RTS            
0401 FCD3          
0402 FCD3          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0403 FCD3          ; OsGbPb
0404 FCD3          ; ======
0405 FCD3          
0406 FCD3          ; GBPBNO->R2, (CB),12->R2...(CB),0->R2, A->R2
0407 FCD3          
0408 FCD3          GBPB     ROUT           
0409 FCD3          
0410 FCD3 84 FB             STY    cbptr+1 
0411 FCD5 86 FA             STX    cbptr   
0412 FCD7 48                PHA            
0413 FCD8                   [      $Turbo  
0414 FCD8 A9 00             LDAIM  0       
0415 FCDA 8D FB 03          STA    Turbo+cbptr 
0416 FCDD                   ]              
0417 FCDD          
0418 FCDD A9 16             LDAIM  GBPBNO  
0419 FCDF 20 8A FC          JSR    WRITOO  
0420 FCE2          
0421 FCE2 A0 0C             LDYIM  12      
0422 FCE4 B1 FA    10       LDAIY  cbptr   
0423 FCE6 20 8A FC          JSR    WRITOO  
0424 FCE9 88                DEY            
0425 FCEA 10 F8             BPL    #BT10   
0426 FCEC          
0427 FCEC 68                PLA            
0428 FCED 20 8A FC          JSR    WRITOO  
0429 FCF0          
0430 FCF0          ; R2->(CB),12...R2->(CB),0, R2bit7->C, R2->A
0431 FCF0          
0432 FCF0 A0 0C             LDYIM  12      
0433 FCF2 20 90 F9 20       JSR    RDCHW   
0434 FCF5 91 FA             STAIY  cbptr   
0435 FCF7 88                DEY            
0436 FCF8 10 F8             BPL    #BT20   
0437 FCFA          
0438 FCFA A4 FB             LDY    cbptr+1 
0439 FCFC A6 FA             LDX    cbptr   
0440 FCFE 4C 8C F9          JMP    RDCHA   
0441 FD01          
0442 FD01          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0443 FD01          ; Default owner of many vectors
0444 FD01          
0445 FD01 00       BadBrk   BRK            
0446 FD02 FF 42 61          =      &FF, "Bad", 0 
0447 FD07          
0448 FD07          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0449 FD07          ; Table of number of bytes to send in OsWord
0450 FD07          
0451 FD07 00       WORSEN   =      0       ; Read system clock
0452 FD08 05                =      5       ; Write system clock
0453 FD09 00                =      0       ; Read interval timer
0454 FD0A 05                =      5       ; Write interval timer
0455 FD0B 04                =      4       ; Read IO processor core
0456 FD0C 05                =      5       ; Write IO processor core
0457 FD0D 08                =      8       ; Produce sound
0458 FD0E 0E                =      14      ; Define sound envelope
0459 FD0F 04                =      4       ; Read pixel logical colour
0460 FD10 01                =      1       ; Read character definition
0461 FD11 01                =      1       ; Read palette
0462 FD12 05                =      5       ; Write palette
0463 FD13 00                =      0       ; Read current + previous graphics cu
0464 FD14                   [      $rel2   
0465 FD14 08                =      8       ; Read CMOS clock
0466 FD15                   |              
0468 FD15                   ]              
0469 FD15 20                =      32      ; Write CMOS clock
0470 FD16 10                =      16      ; Call transmit (NFS)
0471 FD17 0D                =      13      ; Open/read receive block (NFS)
0472 FD18 00                =      0       ; Read remote routine arguments (NFS)
0473 FD19                   [      $rel2   
0474 FD19 08                =      8       ; Read/set miscellaneous net informat
0475 FD1A                   |              
0477 FD1A                   ]              
0478 FD1A 80                =      128     ; Call file server (NFS)
0479 FD1B          
0480 FD1B          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0481 FD1B          ; Table of number of bytes to receive in OsWord
0482 FD1B          
0483 FD1B 05       WORRCV   =      5       ; Read system clock
0484 FD1C 00                =      0       ; Write system clock
0485 FD1D 05                =      5       ; Read interval timer
0486 FD1E 00                =      0       ; Write interval timer
0487 FD1F 05                =      5       ; Read IO processor core
0488 FD20 00                =      0       ; Write IO processor core
0489 FD21 00                =      0       ; Produce sound
0490 FD22 00                =      0       ; Define sound envelope
0491 FD23 05                =      5       ; Read pixel logical colour
0492 FD24 09                =      9       ; Read character definition
0493 FD25 05                =      5       ; Read palette
0494 FD26 00                =      0       ; Write palette
0495 FD27 08                =      8       ; Read current + previous graphics cu
0496 FD28                   [      $rel2   
0497 FD28 19                =      25      ; Read CMOS clock
0498 FD29                   |              
0500 FD29                   ]              
0501 FD29 00                =      0       ; Write CMOS clock
0502 FD2A 01                =      1       ; Call transmit (NFS)
0503 FD2B 0D                =      13      ; Open/read receive block (NFS)
0504 FD2C 80                =      128     ; Read remote routine arguments (NFS)
0505 FD2D                   [      $rel2   
0506 FD2D 08                =      8       ; Read/set miscellaneous net informat
0507 FD2E                   |              
0509 FD2E                   ]              
0510 FD2E 80                =      128     ; Call file server (NFS)
0511 FD2F          
0512 FD2F          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0513 FD2F          ; IRQ/BRK handling
0514 FD2F          
0515 FD2F 85 FC    IRQ      STA    IRQatmp 
0516 FD31 68                PLA            ; Check for BRK instruction
0517 FD32 48                PHA            
0518 FD33 29 10             ANDIM  &10     
0519 FD35 D0 10             BNE    BRK     
0520 FD37          
0521 FD37 6C 04 02          JMI    ALLIRQ  ; Go through first indirection ...
0522 FD3A          
0523 FD3A          
0524 FD3A          ; ... which ends up here. Check for TUBE interrupts
0525 FD3A          
0526 FD3A 2C FE FE DEFIRQ   BIT    R4STAT  ; Register 4 interrupt (data xfer con
0527 FD3D 30 4F             BMI    TUBIRR  
0528 FD3F          
0529 FD3F 2C F8 FE          BIT    R1STAT  ; Register 1 interrupt (events and es
0530 FD42 30 23             BMI    TUBIRQ  
0531 FD44          
0532 FD44 6C 06 02          JMI    IRQVEC  ; Wasn't the TUBE so get hold of the 
0533 FD47          
0534 FD47          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0535 FD47          ; BRK handling. Initialise brkptr to point to error code
0536 FD47          
0537 FD47 8A       BRK      TXA            
0538 FD48 48                PHA            
0539 FD49 BA                TSX            
0540 FD4A BD 03 01          LDAAX  &0103   
0541 FD4D D8                CLD            
0542 FD4E 38                SEC            
0543 FD4F E9 01             SBCIM  1       
0544 FD51 85 FD             STA    brkptr  
0545 FD53 BD 04 01          LDAAX  &0104   
0546 FD56 E9 00             SBCIM  0       
0547 FD58 85 FE             STA    brkptr+1 
0548 FD5A                   [      $Turbo  
0549 FD5A A9 00             LDAIM  0       
0550 FD5C 8D FE 03          STA    Turbo+brkptr 
0551 FD5F                   ]              
0552 FD5F          
0553 FD5F 68                PLA            
0554 FD60 AA                TAX            
0555 FD61 A5 FC             LDA    IRQatmp 
0556 FD63 58                CLI            
0557 FD64 6C 02 02          JMI    BRKVEC  
0558 FD67          
0559 FD67          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0560 FD67          ; Register 1 IRQ. If negative updates escape flag
0561 FD67          
0562 FD67 AD F9 FE TUBIRQ   LDA    R1DATA  
0563 FD6A 30 1C             BMI    TUBESC  
0564 FD6C          
0565 FD6C          ; Event routine. R2->Y, R2->X, R2->A, go to event server
0566 FD6C          
0567 FD6C 98                TYA            
0568 FD6D 48                PHA            
0569 FD6E 8A                TXA            
0570 FD6F 48                PHA            
0571 FD70 20 75 FE          JSR    READON  
0572 FD73 A8                TAY            
0573 FD74 20 75 FE          JSR    READON  
0574 FD77 AA                TAX            
0575 FD78 20 75 FE          JSR    READON  
0576 FD7B 20 85 FD          JSR    GOEVT   
0577 FD7E 68                PLA            
0578 FD7F AA                TAX            
0579 FD80 68                PLA            
0580 FD81 A8                TAY            
0581 FD82 A5 FC             LDA    IRQatmp 
0582 FD84 40                RTI            
0583 FD85          
0584 FD85 6C 20 02 GOEVT    JMI    EVTVEC  
0585 FD88          
0586 FD88          
0587 FD88 0A       TUBESC   ASLA           ; Update EscFlag with bit 6 from the 
0588 FD89 85 FF             STA    EscFlag 
0589 FD8B A5 FC             LDA    IRQatmp 
0590 FD8D 40                RTI            
0591 FD8E          
0592 FD8E          
0593 FD8E AD FF FE TUBIRR   LDA    R4DATA  ; Register 4 IRQ. If negative signifi
0594 FD91 10 21             BPL    TUBADD  
0595 FD93          
0596 FD93 58                CLI            
0597 FD94          
0598 FD94 2C FA FE IRRWAT   BIT    R2STAT  ; Flush data in R2 Host to parasite
0599 FD97 10 FB             BPL    IRRWAT  
0600 FD99 AD FB FE          LDA    R2DATA  
0601 FD9C A9 00             LDAIM  0       
0602 FD9E 8D 36 02          STA    BRKBuffer 
0603 FDA1 A8                TAY            
0604 FDA2          
0605 FDA2          ; R2->error code number
0606 FDA2          
0607 FDA2 20 90 F9          JSR    RDCHW   
0608 FDA5 8D 37 02          STA    BRKBuffer+1 
0609 FDA8          
0610 FDA8          ; R2->string, 0
0611 FDA8          
0612 FDA8 C8       OERRW    INY            
0613 FDA9 20 90 F9          JSR    RDCHW   
0614 FDAC 99 37 02          STAAY  BRKBuffer+1 
0615 FDAF D0 F7             BNE    OERRW   
0616 FDB1          
0617 FDB1 4C 36 02          JMP    BRKBuffer ; Execute the BRK we just copied
0618 FDB4          
0619 FDB4          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0620 FDB4          
0621 FDB4                   [      $Turbo  
0622 FDB4          
0623 FDB4          ; Turbo data transfer initialisation. RC in A
0624 FDB4          
0625 FDB4          TUBADD   ROUT           
0626 FDB4          
0627 FDB4 8D FA FF          STA    NMIIND  ; RC from Host
0628 FDB7 98                TYA            ; Save Y
0629 FDB8 48                PHA            
0630 FDB9 AC FA FF          LDY    NMIIND  
0631 FDBC          
0632 FDBC B9 65 FE          LDAAY  NMILOTAB ; New NMI routine
0633 FDBF 8D FA FF          STA    NMIIND  
0634 FDC2 B9 6D FE          LDAAY  NMIHITAB 
0635 FDC5 8D FB FF          STA    NMIIND+1 
0636 FDC8          
0637 FDC8                   R4BYTE         ; Read R4 (Tube owner handle)
0003 FDC8 2C FE FE          BIT    R4STAT  
0004 FDCB 10 FB             BPL    .-3     
0005 FDCD AD FF FE          LDA    R4DATA  
0006 FDD0                   MEND           
0638 FDD0          
0639 FDD0 C0 05             CPYIM  5       ; Reserved RC
0640 FDD2 F0 55             BEQ    TYARTI  
0641 FDD4          
0642 FDD4                   R4BYTE         ; Ignore just one MSB of hi order add
0003 FDD4 2C FE FE          BIT    R4STAT  
0004 FDD7 10 FB             BPL    .-3     
0005 FDD9 AD FF FE          LDA    R4DATA  
0006 FDDC                   MEND           
0643 FDDC                   R4BYTE         ; Set up data ptr in &F6
0003 FDDC 2C FE FE          BIT    R4STAT  
0004 FDDF 10 FB             BPL    .-3     
0005 FDE1 AD FF FE          LDA    R4DATA  
0006 FDE4                   MEND           
0644 FDE4 8D F7 03          STA    Turbo+dataptr 
0645 FDE7                   R4BYTE         
0003 FDE7 2C FE FE          BIT    R4STAT  
0004 FDEA 10 FB             BPL    .-3     
0005 FDEC AD FF FE          LDA    R4DATA  
0006 FDEF                   MEND           
0646 FDEF 85 F7             STA    dataptr+1 
0647 FDF1                   R4BYTE         
0003 FDF1 2C FE FE          BIT    R4STAT  
0004 FDF4 10 FB             BPL    .-3     
0005 FDF6 AD FF FE          LDA    R4DATA  
0006 FDF9                   MEND           
0648 FDF9 85 F6             STA    dataptr 
0649 FDFB          
0650 FDFB 2C FD FE          BIT    R3DATA  
0651 FDFE 2C FD FE          BIT    R3DATA  
0652 FE01          
0653 FE01                   R4BYTE         ; Read R4
0003 FE01 2C FE FE          BIT    R4STAT  
0004 FE04 10 FB             BPL    .-3     
0005 FE06 AD FF FE          LDA    R4DATA  
0006 FE09                   MEND           
0654 FE09          
0655 FE09 C0 06             CPYIM  6       ; If not RC 6/7 then return
0656 FE0B 90 1C             BCC    TYARTI  
0657 FE0D D0 22             BNE    TRC7    ; C set here for RC 6/7
0658 FE0F          
0659 FE0F          ; ...........................................................
0660 FE0F          
0661 FE0F          TRC6     ROUT           ; 256 byte : Turbo -> Host
0662 FE0F          
0663 FE0F 6E F0 FE          ROR    REG0    ; Turbo on. C set on entry
0664 FE12 A0 00             LDYIM  0       
0665 FE14          
0666 FE14 2C FC FE 10TRC6   BIT    R3STAT  
0667 FE17 10 FB             BPL    .-3     ; NB. BPL !
0668 FE19 B1 F6             LDAIY  dataptr 
0669 FE1B 8D FD FE          STA    R3DATA  
0670 FE1E C8                INY            
0671 FE1F D0 F3             BNE    #10TRC6 
0672 FE21          
0673 FE21 2C FC FE          BIT    R3STAT  
0674 FE24 10 FB             BPL    .-3     
0675 FE26 8D FD FE          STA    R3DATA  
0676 FE29          
0677 FE29          ; ...........................................................
0678 FE29          
0679 FE29 0E F0 FE TYARTI   ASL    REG0    ; Restore Turbo state, Y, A
0680 FE2C 68                PLA            
0681 FE2D A8                TAY            
0682 FE2E A5 FC             LDA    IRQatmp 
0683 FE30 40                RTI            
0684 FE31          
0685 FE31          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0686 FE31          
0687 FE31          TRC7     ROUT           ; 256 byte : Host -> Turbo
0688 FE31          
0689 FE31 A0 00             LDYIM  0       
0690 FE33 6E F0 FE          ROR    REG0    ; Turbo on. C set on entry
0691 FE36          
0692 FE36 2C FC FE 10TRC7   BIT    R3STAT  
0693 FE39 10 FB             BPL    .-3     ; NB. BPL !
0694 FE3B AD FD FE          LDA    R3DATA  
0695 FE3E 91 F6             STAIY  dataptr 
0696 FE40 C8                INY            
0697 FE41 D0 F3             BNE    #10TRC7 
0698 FE43          
0699 FE43 F0 E4             BEQ    TYARTI  ; Forced
0700 FE45          
0701 FE45          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0702 FE45          
0703 FE45          TRC0     ROUT           ; Byte transfer : Turbo -> Host
0704 FE45          
0705 FE45 48                PHA            
0706 FE46 98                TYA            
0707 FE47 48                PHA            
0708 FE48 38                SEC            
0709 FE49 6E F0 FE          ROR    REG0    ; Turbo on
0710 FE4C          
0711 FE4C A0 00             LDYIM  0       
0712 FE4E B1 F6             LDAIY  dataptr 
0713 FE50 8D FD FE          STA    R3DATA  
0714 FE53          
0715 FE53 E6 F6             INC    dataptr 
0716 FE55 D0 07             BNE    #10TRC0 
0717 FE57 E6 F7             INC    dataptr+1 
0718 FE59 D0 03             BNE    #10TRC0 
0719 FE5B EE F7 03          INC    Turbo+dataptr 
0720 FE5E          
0721 FE5E 68       10TRC0   PLA            
0722 FE5F A8                TAY            
0723 FE60 68                PLA            
0724 FE61 0E F0 FE          ASL    REG0    
0725 FE64 40                RTI            
0726 FE65          
0727 FE65          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0728 FE65          
0729 FE65          NMILOTAB                
0730 FE65 45 00 20          =      :LSB: TRC0,   :LSB: TRC1,   :LSB: TRC2,   :LS
0731 FE69 AB AB AB          =      :LSB: DefNMI, :LSB: DefNMI, :LSB: DefNMI, :LS
0732 FE6D          
0733 FE6D          NMIHITAB                
0734 FE6D FE FF FF          =      :MSB: TRC0,   :MSB: TRC1,   :MSB: TRC2,   :MS
0735 FE71 FE FE FE          =      :MSB: DefNMI, :MSB: DefNMI, :MSB: DefNMI, :MS
0736 FE75          
0737 FE75          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0738 FE75          
0739 FE75                   ]              ; not quite the end of Turbo data tra
0740 FE75          
0741 FE75                   [      :LNOT: $Turbo 
0937 FE75                   ]              ; end of non-Turbo data transfer
0938 FE75          
0939 FE75          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0940 FE75          ; Subroutine allows R4 IRQ when reading byte from R1 with IRQ
0941 FE75          
0942 FE75          READON   ROUT           
0943 FE75          
0944 FE75 2C F8 FE          BIT    R1STAT  
0945 FE78 30 0F             BMI    #FT90   
0946 FE7A          
0947 FE7A 2C FE FE          BIT    R4STAT  
0948 FE7D 10 F6             BPL    READON  
0949 FE7F          
0950 FE7F A5 FC             LDA    IRQatmp 
0951 FE81 08                PHP            
0952 FE82 58                CLI            
0953 FE83 28                PLP            
0954 FE84 85 FC             STA    IRQatmp 
0955 FE86 4C 75 FE          JMP    READON  
0956 FE89          
0957 FE89 AD F9 FE 90       LDA    R1DATA  
0958 FE8C 60                RTS            
0959 FE8D          
0960 FE8D          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0961 FE8D          ; String immediate out routine
0962 FE8D          
0963 FE8D          VSTRNG   ROUT           
0964 FE8D          
0965 FE8D 68                PLA            
0966 FE8E 85 FA             STA    vstrptr 
0967 FE90 68                PLA            
0968 FE91 85 FB             STA    vstrptr+1 
0969 FE93          
0970 FE93 A0 00             LDYIM  0       
0971 FE95                   [      $Turbo  
0972 FE95 8C FB 03          STY    Turbo+vstrptr 
0973 FE98                   ]              
0974 FE98          
0975 FE98 E6 FA    10       INC    vstrptr 
0976 FE9A D0 02             BNE    #FT20   
0977 FE9C E6 FB             INC    vstrptr+1 
0978 FE9E B1 FA    20       LDAIY  vstrptr 
0979 FEA0 30 06             BMI    #FT99   
0980 FEA2 20 EE FF          JSR    OsWrch  
0981 FEA5 4C 98 FE          JMP    #BT10   
0982 FEA8          
0983 FEA8 6C FA 00 99       JMI    vstrptr 
0984 FEAB          
0985 FEAB          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0986 FEAB          ; NMI pointed here during initialisation. For some reason you
0987 FEAB          
0988 FEAB 8D FD FE DefNMI   STA    R3DATA  
0989 FEAE 40                RTI            
0990 FEAF          
0991 FEAF                   LNK    TOS03   
0001 FEAF                   TTL    > Tos03 
0002 FEAF          
0003 FEAF          
0004 FEAF                   ASSERT . <= REG0 
0005 FEAF          
0006 FEAF FEAF     GAP1     *      .       ; Plug first gap with &FF's for consi
0007 FEAF          
0008 FEAF                   OPT    2       
0012 FF00                   OPT    1       
0013 FF00          
0014 FF00          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0015 FF00          
0016 FF00                   [      $Turbo  
0017 FF00          
0018 FF00          TRC1     ROUT           ; Byte transfer : Host -> Turbo
0019 FF00          
0020 FF00 48                PHA            ; Stash A, Y
0021 FF01 98                TYA            
0022 FF02 48                PHA            
0023 FF03 38                SEC            
0024 FF04 6E F0 FE          ROR    REG0    ; Turbo on
0025 FF07          
0026 FF07 AD FD FE          LDA    R3DATA  
0027 FF0A A0 00             LDYIM  0       
0028 FF0C 91 F6             STAIY  dataptr 
0029 FF0E          
0030 FF0E E6 F6             INC    dataptr 
0031 FF10 D0 07             BNE    #10TRC1 
0032 FF12 E6 F7             INC    dataptr+1 
0033 FF14 D0 03             BNE    #10TRC1 
0034 FF16 EE F7 03          INC    Turbo+dataptr 
0035 FF19          
0036 FF19 68       10TRC1   PLA            ; Restore Y, A
0037 FF1A A8                TAY            
0038 FF1B 68                PLA            
0039 FF1C 0E F0 FE          ASL    REG0    ; Restore Turbo state
0040 FF1F 40                RTI            
0041 FF20          
0042 FF20          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0043 FF20          
0044 FF20          TRC2     ROUT           ; Pair transfer : Turbo -> Host
0045 FF20          
0046 FF20 48                PHA            ; Stash A, Y
0047 FF21 98                TYA            
0048 FF22 48                PHA            
0049 FF23 38                SEC            
0050 FF24 6E F0 FE          ROR    REG0    ; Turbo on
0051 FF27          
0052 FF27 A0 00             LDYIM  0       
0053 FF29 B1 F6             LDAIY  dataptr 
0054 FF2B 8D FD FE          STA    R3DATA  
0055 FF2E          
0056 FF2E E6 F6             INC    dataptr 
0057 FF30 D0 07             BNE    #10TRC2 
0058 FF32 E6 F7             INC    dataptr+1 
0059 FF34 D0 03             BNE    #10TRC2 
0060 FF36 EE F7 03          INC    Turbo+dataptr 
0061 FF39          
0062 FF39 B1 F6    10TRC2   LDAIY  dataptr 
0063 FF3B 8D FD FE          STA    R3DATA  
0064 FF3E          
0065 FF3E E6 F6             INC    dataptr 
0066 FF40 D0 07             BNE    #20TRC2 
0067 FF42 E6 F7             INC    dataptr+1 
0068 FF44 D0 03             BNE    #20TRC2 
0069 FF46 EE F7 03          INC    Turbo+dataptr 
0070 FF49          
0071 FF49 68       20TRC2   PLA            ; Restore Y, A
0072 FF4A A8                TAY            
0073 FF4B 68                PLA            
0074 FF4C 0E F0 FE          ASL    REG0    ; Restore Turbo state
0075 FF4F 40                RTI            
0076 FF50          
0077 FF50          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0078 FF50          
0079 FF50          TRC3     ROUT           ; Pair transfer : Host -> Turbo
0080 FF50          
0081 FF50 48                PHA            ; Stash A, Y
0082 FF51 98                TYA            
0083 FF52 48                PHA            
0084 FF53 38                SEC            
0085 FF54 6E F0 FE          ROR    REG0    ; Turbo on
0086 FF57          
0087 FF57 AD FD FE          LDA    R3DATA  
0088 FF5A A0 00             LDYIM  0       
0089 FF5C 91 F6             STAIY  dataptr 
0090 FF5E          
0091 FF5E E6 F6             INC    dataptr 
0092 FF60 D0 07             BNE    #10TRC3 
0093 FF62 E6 F7             INC    dataptr+1 
0094 FF64 D0 03             BNE    #10TRC3 
0095 FF66 EE F7 03          INC    Turbo+dataptr 
0096 FF69          
0097 FF69 AD FD FE 10TRC3   LDA    R3DATA  
0098 FF6C 91 F6             STAIY  dataptr 
0099 FF6E          
0100 FF6E E6 F6             INC    dataptr 
0101 FF70 D0 07             BNE    #20TRC3 
0102 FF72 E6 F7             INC    dataptr+1 
0103 FF74 D0 03             BNE    #20TRC3 
0104 FF76 EE F7 03          INC    Turbo+dataptr 
0105 FF79          
0106 FF79 68       20TRC3   PLA            ; Restore Y, A
0107 FF7A A8                TAY            
0108 FF7B 68                PLA            
0109 FF7C 0E F0 FE          ASL    REG0    ; Restore Turbo state
0110 FF7F 40                RTI            
0111 FF80          
0112 FF80          ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0113 FF80          
0114 FF80                   ]              
0115 FF80          
0116 FF80                   ASSERT . <= &FF80 
0117 FF80          
0118 FF80 FF80     GAP2     *      .       ; Plug second gap with &FF's for cons
0119 FF80          
0120 FF80                   OPT    2       
0124 FF80                   OPT    1       
0125 FF80          
0126 FF80          
0127 FF80 01 FD    VECTAB   &      BadBrk  ; uservec
0128 FF82 60 F9             &      DEFBRK  
0129 FF84 3A FD             &      DEFIRQ  ; allirq
0130 FF86 01 FD             &      BadBrk  ; irq
0131 FF88 F9 F9             &      CLI     
0132 FF8A 96 FA             &      BYTE    
0133 FF8C 3A FB             &      WORD    
0134 FF8E 7D F9             &      WRCH    
0135 FF90 87 F9             &      RDCH    
0136 FF92 93 FC             &      FILE    
0137 FF94 0C FC             &      ARGS    
0138 FF96 6A FC             &      BGET    
0139 FF98 76 FC             &      BPUT    
0140 FF9A D3 FC             &      GBPB    
0141 FF9C 4C FC             &      FIND    
0142 FF9E 01 FD             &      BadBrk  
0143 FFA0 98 F9             &      ANRTS   ; event
0144 FFA2 01 FD             &      BadBrk  
0145 FFA4 01 FD             &      BadBrk  
0146 FFA6 01 FD             &      BadBrk  
0147 FFA8 01 FD             &      BadBrk  
0148 FFAA 01 FD             &      BadBrk  
0149 FFAC 01 FD             &      BadBrk  
0150 FFAE 01 FD             &      BadBrk  
0151 FFB0 98 F9             &      ANRTS   
0152 FFB2 98 F9             &      ANRTS   
0153 FFB4 98 F9             &      ANRTS   
0154 FFB6                   ASSERT . = VECTAB + VecLength 
0155 FFB6          
0156 FFB6          
0157 FFB6                   ASSERT . = &FFB6 
0158 FFB6 36                =      VecLength 
0159 FFB7 80 FF             &      VECTAB  
0160 FFB9          
0161 FFB9 4C 01 FD OSRDRM   JMP    BadBrk  
0162 FFBC 4C 01 FD RAWVDU   JMP    BadBrk  
0163 FFBF 4C 01 FD OSEVEN   JMP    BadBrk  
0164 FFC2 4C 01 FD GSINIT   JMP    BadBrk  
0165 FFC5 4C 01 FD GSREAD   JMP    BadBrk  
0166 FFC8 4C 87 F9 NVRDCH   JMP    RDCH    
0167 FFCB 4C 7D F9 NVWRCH   JMP    WRCH    
0168 FFCE          
0169 FFCE 6C 1C 02 OSFIND   JMI    FNDVEC  
0170 FFD1 6C 1A 02 OSBGPB   JMI    GPBVEC  
0171 FFD4 6C 18 02 OSBPUT   JMI    BPTVEC  
0172 FFD7 6C 16 02 OSBGET   JMI    BGTVEC  
0173 FFDA 6C 14 02 OSARGS   JMI    ARGVEC  
0174 FFDD 6C 12 02 OSFILE   JMI    FILVEC  
0175 FFE0 6C 10 02 OSRDCH   JMI    RDCVEC  
0176 FFE3 C9 0D    OSASCI   CMPIM  CR      
0177 FFE5 D0 07             BNE    OSWRCH  
0178 FFE7 A9 0A    OSNEWL   LDAIM  LF      
0179 FFE9 20 EE FF          JSR    OSWRCH  
0180 FFEC A9 0D             LDAIM  CR      
0181 FFEE 6C 0E 02 OSWRCH   JMI    WRCVEC  
0182 FFF1 6C 0C 02 OSWORD   JMI    WORVEC  
0183 FFF4 6C 0A 02 OSBYTE   JMI    BYTVEC  
0184 FFF7 6C 08 02 OSCLI    JMI    COMVEC  
0185 FFFA          
0186 FFFA AB FE    NMIIND   &      DEFNMI  
0187 FFFC 00 F8             &      RESET   
0188 FFFE 2F FD             &      IRQ     
0189 0000                   ASSERT . = 0   
0190 0000          
0191 0000                   END            
